import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.62b283ab.js";const u=JSON.parse('{"title":"环境说明","description":"","frontmatter":{},"headers":[],"relativePath":"env.md","filePath":"env.md","lastUpdated":1706077760000}'),o={name:"env.md"},p=l(`<h1 id="环境说明" tabindex="-1">环境说明 <a class="header-anchor" href="#环境说明" aria-label="Permalink to &quot;环境说明&quot;">​</a></h1><h2 id="sdk-包" tabindex="-1">SDK 包 <a class="header-anchor" href="#sdk-包" aria-label="Permalink to &quot;SDK 包&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">提示</p><p>分为<code>cjs</code>版本和<code>iife</code>版本</p><p><code>cjs</code>：遵循 <code>CommonJs</code> 规范，支持 <code>require()</code> 方式引入</p><p><code>iife</code>：自执行函数，引入 <code>iife</code> 版本则会直接在 <code>window</code> 对象下自动挂在 <code>jll</code> 变量</p></div><blockquote><p>暂不支持 npm 引入，后续会支持</p></blockquote><h3 id="vue-引入示例-cjs版本" tabindex="-1">vue 引入示例 - <code>cjs版本</code> <a class="header-anchor" href="#vue-引入示例-cjs版本" aria-label="Permalink to &quot;vue 引入示例 - \`cjs版本\`&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// sdk.js</span></span>
<span class="line"><span style="color:#6A737D;">// p<wbr>rocess.env.NODE_ENV 为 Node 自带的环境变量，用于区分当前引入测试包或者正式包</span></span>
<span class="line"><span style="color:#6A737D;">// 根据自己项目去定义引入哪个包</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">jll</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`@/plugins/jllsdk.cjs.min_v3.0.0_\${</span></span>
<span class="line"><span style="color:#9ECBFF;">  </span><span style="color:#E1E4E8;">process</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">env</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;prod&#39;</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&#39;test&#39;</span></span>
<span class="line"><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> jll</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// page.vue</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jll </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./sdk.js&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 打印出 jll 下的所有方法~</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(jll)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// sdk.js</span></span>
<span class="line"><span style="color:#6A737D;">// p<wbr>rocess.env.NODE_ENV 为 Node 自带的环境变量，用于区分当前引入测试包或者正式包</span></span>
<span class="line"><span style="color:#6A737D;">// 根据自己项目去定义引入哪个包</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">jll</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`@/plugins/jllsdk.cjs.min_v3.0.0_\${</span></span>
<span class="line"><span style="color:#032F62;">  </span><span style="color:#24292E;">process</span><span style="color:#032F62;">.</span><span style="color:#24292E;">env</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;prod&#39;</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&#39;test&#39;</span></span>
<span class="line"><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> jll</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// page.vue</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jll </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./sdk.js&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 打印出 jll 下的所有方法~</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(jll)</span></span></code></pre></div><h3 id="script标签引入示例-iife版本" tabindex="-1">script标签引入示例 - <code>iife版本</code> <a class="header-anchor" href="#script标签引入示例-iife版本" aria-label="Permalink to &quot;script标签引入示例 - \`iife版本\`&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 测试环境</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;https://osslarp.oss-cn-shenzhen.aliyuncs.com/common/sdk/jllsdk.iife.min_v3.0.0_test.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 正式环境</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;https://osslarp.oss-cn-shenzhen.aliyuncs.com/common/sdk/jllsdk.iife.min_v3.0.0_prod.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">// 打印出 jll 下的所有方法~</span></span>
<span class="line"><span style="color:#E1E4E8;">console.log(jll)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 测试环境</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;https://osslarp.oss-cn-shenzhen.aliyuncs.com/common/sdk/jllsdk.iife.min_v3.0.0_test.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 正式环境</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;https://osslarp.oss-cn-shenzhen.aliyuncs.com/common/sdk/jllsdk.iife.min_v3.0.0_prod.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">// 打印出 jll 下的所有方法~</span></span>
<span class="line"><span style="color:#24292E;">console.log(jll)</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="沙盒环境与房间内-idc-环境" tabindex="-1">沙盒环境与房间内 <code>idc</code> 环境 <a class="header-anchor" href="#沙盒环境与房间内-idc-环境" aria-label="Permalink to &quot;沙盒环境与房间内 \`idc\` 环境&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">沙盒环境</p><p><code>沙盒环境</code>：指不在房间内启动机制，在 <a href="https://cspace.you-drama.com" target="_blank" rel="noreferrer">柒巧空间</a> 创建剧本后，</p><p><code>进入剧本详情 - 编辑剧本 - 环节设置 - 机制素材 - token</code> 打开 token 弹框后，会看到 token 字样，后面一串加密字符串就是 <code>剧本key</code></p><p><code>剧本key</code>：用于获取当前剧本下的所有角色列表，包含<code>角色ID</code>，<code>角色token</code>、<code>角色昵称</code>等</p><p><code>角色token</code>：用于后续 API 的调用凭证</p><p>具体拼接使用请查看<a href="/jll-sdk-docs/introduction.html">简介</a>~</p></div><div class="tip custom-block"><p class="custom-block-title">房间内 <code>idc</code> 环境</p><p><code>idc环境</code>：玩家进入房间后，选择角色，后续启动 <code>H5机制</code> ，会自动在 url 上拼接<code>角色ID</code>、<code>角色token</code>、<code>用户ID</code>等相关信息</p></div><h2 id="变量说明" tabindex="-1">变量说明 <a class="header-anchor" href="#变量说明" aria-label="Permalink to &quot;变量说明&quot;">​</a></h2><p>变量分为<code>全局变量</code>和<code>角色变量</code></p><p><strong>全局变量：</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>全局变量</code>为房间内的自定义数据，例如游戏总库存、游戏商城物品等，可以定义为<code>全局变量</code></p></div><p><strong>角色变量：</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>角色变量</code>为当前角色的自定义数据，与角色绑定，例如角色的属性、血量、蓝量、背包、金币等，与角色挂钩的可定义为角色变量，如<code>角色A</code>向游戏商城购买一本武功秘籍，则需要操作<code>全局变量</code>总库存<code>-1</code>，后操作角色A背包<code>角色变量</code>武功秘籍<code>+1</code></p></div>`,17),e=[p];function c(t,r,i,d,y,E){return a(),n("div",null,e)}const h=s(o,[["render",c]]);export{u as __pageData,h as default};
