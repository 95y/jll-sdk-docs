import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.62b283ab.js";const k=JSON.parse('{"title":"SDK 初始化相关 API","description":"","frontmatter":{},"headers":[],"relativePath":"init.md","filePath":"init.md","lastUpdated":1706077760000}'),t={name:"init.md"},o=e(`<h1 id="sdk-初始化相关-api" tabindex="-1">SDK 初始化相关 API <a class="header-anchor" href="#sdk-初始化相关-api" aria-label="Permalink to &quot;SDK 初始化相关 API&quot;">​</a></h1><p>调用初始化API后，SDK会在本地 <code>sessionStorage</code> 缓存里 写入 &#39;JLL_SDK_TOKEN&#39; 变量值，后续调用 <code>GET</code> 或者 <code>SET</code> 就不需要再传入token</p><h3 id="初始化sdk" tabindex="-1">初始化SDK <a class="header-anchor" href="#初始化sdk" aria-label="Permalink to &quot;初始化SDK&quot;">​</a></h3><p>引入SDK后，必须先执行 <code>jll.init(token)</code>，才可调用后续 <code>自定义全局变量Global</code> 和 <code>自定义角色变量Role</code> 相关API</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>token</td><td>String</td><td>角色的Token</td></tr></tbody></table><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * jll.init(token)</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">token</span><span style="color:#6A737D;">: 角色token</span></span>
<span class="line"><span style="color:#6A737D;"> **/</span></span>
<span class="line"><span style="color:#E1E4E8;">jll.</span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;角色token&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * jll.init(token)</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">token</span><span style="color:#6A737D;">: 角色token</span></span>
<span class="line"><span style="color:#6A737D;"> **/</span></span>
<span class="line"><span style="color:#24292E;">jll.</span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;角色token&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div>`,6),l=[o];function p(c,r,i,d,h,y){return a(),n("div",null,l)}const D=s(t,[["render",p]]);export{k as __pageData,D as default};
